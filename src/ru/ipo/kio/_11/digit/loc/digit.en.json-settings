{
    "title1":"Sharp-eyed robot",
	"title2":"Postal codes",
    "statement1": <<<
		<p>In order to solve the problem you must construct a scheme of the robot’s eye so that it could recognize all the digits of the electronic clock. 
While constructing you can use such logical symbols as And, Or, Not. 
Element And gives an output signal only if it receives signals though the both inputs; element Or – if it receives a signal through at least one of the inputs.  
Element Not blocks an input signal and generates it if there is no input signal. 

The winner is the one whose robot can recognize all the numbers and has the simplest construction (consists of the smallest number of elements And, Or, Not).

</p>
	>>>,
	"statement2": <<<
		<p>In the USSR the system of automatic letter sorting was first used in the second half of the XX century.  
 A special system of postcodes and equipment that can recognize these postcodes were developed for the letter sorting system. 
 This system is still working in Russia.

In order to solve the problem you need to create equipment that can recognize digits written with type face established for this system.
Every digit consists of a set of lines including three horizontal lines, four vertical and two inclined ones.
Every line can be recognized only by the separate corresponding reader element.
Every output of an element is an input for the recognizing scheme that must identify a digit on the base of recognized lines.
The scheme consists of logical elements And, Or, Not.
Element And gives an output signal only if it receives signals though the both inputs; element Or – if it receives a signal through at least one of the inputs. 
Element Not blocks an input signal and generates it if there is no input signal. 


But some complications can occur, for example, a reader element can break.
You should develop such scheme that will recognize digits correctly even if one of the reader elements is broken.
A problem solution is estimated according to two parameters:

1). Number of digits that are recognized correctly with account of possible mistake 
that can occur due to the damage of a reader element (you should try to increase this parameter)*;


If some solutions are equal according to the first parameter then they will be compared regarding the second one.
2) Number of scheme elements (use as few of them as possible).

*Note that there are all the combinations of a letter being read (there are 10 digits in total: from 0 to 9)
and a damaged element (there are 9 versions of damaged elements and one more meaning that all the elements are intact) represented in the table of results. 
Combinations that are recognized by the constructed scheme incorrectly are marked with red. 
(When you click on a red cell you will see a digit that will be recognized as the same one by mistake on the indicator panel). You need to ovoid such situations.
		</p>
	>>>,
	
	"help":<<<
		<p>
You can use elements And, Or, Not and wires to construct a robot scheme.
It’s possible to drag them to the work field from the left panel in any quantity.
You can connect elements directly or by wires (it is allowed to connect any number of the wires to the output of the element and only one to the input).
In order to make a connection you must drag a plug situated on the end of a wire to the place you want. If you drag an element to the recycle bin you will remove it. 
In order to disconnect an element you must select a wire by left-click and then select a wire’s plug and click on button Disconnect. 
In some situations it can be useful to add one more part of the wire to place elements into a necessary order.
In that case you should select a wire that you want to divide into two connected wires and click on button Insert that adds a junction to a wire

	>>>,
    "buttons": {
        "split": "Split",
        "reset": "Reset"
    },
    "gates": {
        "and": "and",
        "or": "or",
        "not": "not",
        "nop": "nop"
    },
    "results": {
        "correct" : "correct",
        "wrong" : "wrong",
        "hint_correct_0" : "Correct. If there are no broken elements, digit {digit} is recognized correctly.",
        "hint_wrong_0" : "Wrong. If there are no broken elements, digit {digit} is recognized incorrectly.",
        "hint_correct" : "Correct. If {line} element is broken, digit {digit} is recognized correctly.",
        "hint_wrong" : "Wrong. If {line} element is broken, digit {digit} is recognized incorrectly.",
        "lines" : [
            "-",
            "top",
            "upper left",
            "upper diagonal",
            "upper right",
            "centered",
            "lower left",
            "lower diagonal",
            "lower right",
            "lower"
        ],
        "result" : "Result",
        "record" : "Record",
        "recognition_info_header" : "Recognized",
        "recognition_info_1" : "digits out of 10",
        "recognition_info_2" : "situations",
        "elements_info" : "Elements"
    }
}